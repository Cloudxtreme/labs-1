# -*- mode: ruby -*-
# vi: set ft=ruby :

# Configuration variables
require "./config/config.rb"

# Get managed servers list
require "./config/servers.rb"

# Vagrant setup loop
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

#####
  SERVERS.each do |server|
    server[:dist]     ||= "#{server[:box][:path]}"
    server[:cpus]     ||= 1
    server[:mem]      ||= 512
    server[:mounts]   ||= {}
    server[:pfwd]     ||= {}
    server[:fqdn]     ||= "#{server[:host]}.#{DOMAIN}"
    server[:prov]     ||= "#{server[:box][:prov]}"
    # docker-specific
    server[:privil]   ||= false
    server[:cargs]    ||= []
    server[:expose]   ||= []
    server[:links]    ||= []

    config.vm.define server[:host].to_sym do |vm_config|

      # switch provider:
      case server[:prov]
        when PROVIDERS[:vbox]
          vm_config.vm.box = "#{server[:dist]}"
          vm_config.vm.network "private_network", ip: "#{server[:ip]}"#, virtualbox__intnet: "#{DOMAIN}"
          vm_config.vm.hostname = "#{server[:host]}.#{DOMAIN}"
          vm_config.vm.provider server[:prov] do |vb|
            vb.customize ["modifyvm", :id, "--memory", server[:mem]]
            vb.customize ["modifyvm", :id, "--cpus", server[:cpus]]
            vb.customize ["modifyvm", :id, "--name", server[:fqdn]]
            vb.customize ["modifyvm", :id, "--groups", "/#{DOMAIN}"]
            server[:pfwd].each do |pfwd|
              vm_config.vm.network "forwarded_port", guest: pfwd, host: pfwd, host_ip: "#{HOSTIP}"
            end
            vb.gui = true if DEBUGMODE
          end
        when PROVIDERS[:docker]
          vm_config.vm.provider server[:prov] do |d|
            d.privileged = server[:privil]
            d.create_args = ["-h", "#{server[:host]}", "--dns-search=#{DOMAIN}", "--add-host=salt:#{SALTMASTER}"] + server[:cargs]
            d.build_dir = "./docker/#{server[:dist]}"
            d.name = "#{server[:host]}.#{DOMAIN}"
            d.has_ssh = true
            server[:pfwd].each do |pfwd|
              server[:expose] += ["#{pfwd}:#{pfwd}"]
            end
            d.ports = server[:expose]
            server[:links].each do |link|
              d.link("#{link}")
            end
            d.remains_running = true
          end
      end
      
      # initialize
      vm_config.ssh.username = "#{server[:box][:creds][:username]}"
      vm_config.ssh.password = "#{server[:box][:creds][:password]}"

      # mounts
      MOUNTS.each do |mount_name, mount_info|
        if server[:mounts].include? mount_name
          if mount_info[:nfs]
            vm_config.vm.synced_folder mount_info[:localdir], mount_info[:mountpoint], :nfs => mount_info[:nfs], :nfs_version => 2
          else
            vm_config.vm.synced_folder mount_info[:localdir], mount_info[:mountpoint]
          end
        end
      end

      # provision
      vm_config.vm.provision :shell do |shell|
        shell.path = "bootstrap/salt/hosts.sh"
        shell.keep_color = true
      end
      if server[:saltmaster]
        vm_config.vm.provision :shell do |shell|
          shell.path = "bootstrap/salt/saltmaster/bootstrap.sh"
            shell.keep_color = true
        end
      else
        vm_config.vm.provision :shell do |shell|
         shell.path = "bootstrap/salt/saltminion/bootstrap.sh"
            shell.keep_color = true
        end
      end
    end
  end
#####

end
